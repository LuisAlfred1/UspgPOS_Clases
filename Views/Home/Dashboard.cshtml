﻿@{
	ViewData["Title"] = "Dashboard";
}

<h5>Tarea y ejercicio</h5>
<div class="row">
	<div class="col-6">
		<div class="card">
			<div id="treemapEmpleadosPorDepartamento"></div>
		</div>
	</div>
	<div class="col-6">
		<div class="card">
			<div id="salarioPorDepartamentoChart"></div>
		</div>
	</div>
</div>

<div class="row">
    <div class="col-7">
        <div class="card">
			<div id="PromedioPosicionChart"></div>
		</div>
	</div>
	<div class="col-5">
		<div class="card">
			<div id="CantidadEmpleadoContratadoChart"></div>
		</div>
	</div>
</div>

<style>
	.card {
		padding: 10px;
		margin: 20px;
		background: rgba(255,255,255,.2);
		backdrop-filter: blur(30px)
	}
</style>


<script>
	document.addEventListener("DOMContentLoaded", function () {
		const departamentos = @Html.Raw(ViewBag.Departamentos);
		const promedioDesempeno = @Html.Raw(ViewBag.PromedioDesempeno);
		const promedioSatisfaccion = @Html.Raw(ViewBag.PromedioSatisfaccion);
		const puntajeDesempeno = @Html.Raw(ViewBag.PuntajeDesempeno);
		const puntajeSatisfaccion = @Html.Raw(ViewBag.PuntajeSatisfaccion);
		const empleadosPorDepartamento = @Html.Raw(ViewBag.EmpleadosPorDepartamento);


		const configuracionGraficoPromedioDesemepenoSatisfaccion = {
			chart: {
				type: 'radar'
			},
			series: [
				{
					name: 'Desempeño Promedio',
					data: promedioDesempeno
				},
				{
					name:'Satisfacción Promedio',
					data: promedioSatisfaccion
				}
			],
			labels: departamentos,
			title: {
				text: 'Comparación de Desempeño y Satisfacción Promedio por Departamento'
			}
		}

		const graficoPromedioDesemepenoSatisfaccion = new ApexCharts(document.getElementById("graficoPromedioDesemepenoSatisfaccion"), configuracionGraficoPromedioDesemepenoSatisfaccion);
		graficoPromedioDesemepenoSatisfaccion.render();


		const configuracionGraficoPuntajeDesemepenoSatisfaccion = {
			chart: {
				type: 'bar'
			},
			series: [
				{
					name: 'Desempeño',
					data: puntajeDesempeno.map(e => e.toFixed(2))
				},
				{
					name: 'Satisfacción',
					data: puntajeSatisfaccion.map(e => e.toFixed(2))
				}
			],
			xaxis: {
				categories: departamentos
			},
			title: {
				text: 'Comparación puntaje de Desempeño y Satisfacción por Departamento'
			}
		}

		const graficoPuntajeDesemepenoSatisfaccion = new ApexCharts(
			document.getElementById('graficoPuntajeDesemepenoSatisfaccion'),
			configuracionGraficoPuntajeDesemepenoSatisfaccion
		);
		graficoPuntajeDesemepenoSatisfaccion.render();

	})

</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		// Obtener datos desde ViewBag
		const empleadosPorDepartamento = @Html.Raw(ViewBag.EmpleadosPorDepartamento);

		// Configuración para el gráfico Treemap
		const configuracionTreemap = {
			chart: {
				type: 'treemap',
				height: 300
			},
			series: [
				{
					data: empleadosPorDepartamento.map(departamento => ({
						x: departamento.Departamento,
						y: departamento.Cantidad
					}))
				}
			],
			title: {
				text: 'Cantidad de Empleados por Departamento'
			}
		};

		// Renderizar el gráfico
		const treemapEmpleadosPorDepartamento = new ApexCharts(
			document.getElementById("treemapEmpleadosPorDepartamento"),
			configuracionTreemap
		);

		treemapEmpleadosPorDepartamento.render();
	});
</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		// Obtener datos desde ViewBag
		const salarioPorDepa = @Html.Raw(ViewBag.salarioPromedioPorDepartamento);
		const departamentos = @Html.Raw(ViewBag.DepartamentosSal);

		// Configuración para el gráfico Pie
		const configuracionPie = {
			chart: {
				type: 'pie'
			},
			series: salarioPorDepa,
			labels: departamentos,
			title: {
				text: 'Salario promedio por departamento'
			}
		};

		// Renderizar el gráfico
		const salarioPorDepartamentoChart = new ApexCharts(
			document.getElementById("salarioPorDepartamentoChart"),
			configuracionPie
		);

		salarioPorDepartamentoChart.render();
	});
</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		// Obtener datos desde ViewBag
		const posiciones = @Html.Raw(ViewBag.Posicion);
		const promedioPosicion = @Html.Raw(ViewBag.PromedioPorPosicion);

		// Configuración para el gráfico
		const configuracionBar = {
			chart: {
				type: 'bar'
			},
			series: [
				{
					name: 'Promedios por posicion',
					data: promedioPosicion
				}
			],
			xaxis: {
				categories: posiciones
			},
			title: {
				text: 'Promedio de años de experiencia por posición'
			}
		};

		// Renderizar el gráfico
		const chart = new ApexCharts(
			document.getElementById("PromedioPosicionChart"),
			configuracionBar
		);

		chart.render();
	});
</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		// Obtener datos desde ViewBag
		const contratadosPorAnio = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ContratadosPorAnio));

		// Configuración para el gráfico
		const configuracion = {
			chart: {
				type: 'line',
				height: 350
			},
			series: [{
				name: 'Empleados contratados',
				data: contratadosPorAnio.map(item => item.Cantidad) // Cantidades por año
			}],
			xaxis: {
				categories: contratadosPorAnio.map(item => item.Año) // Años
			},
			title: {
				text: 'Cantidad de Empleados Contratados por Año',
				align: 'center'
			}
		};

		// Renderizar el gráfico
		const chart = new ApexCharts(
			document.getElementById("CantidadEmpleadoContratadoChart"),
			configuracion
		);

		chart.render();
	});
</script>


